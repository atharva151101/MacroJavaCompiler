//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
      
      
   }

   public R visit(NodeListOptional n, A argu) {
      
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
        
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      return _ret;
      
      
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      
      combined Table= (combined) argu;
      if(!Table.Table1.complete){
      n.f0.accept(this, argu);
      Table.Table1.Main_class=(String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
      }
      else{
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Table.Table2.current_class="Main"; 
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      System.out.println("MAIN");
      
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      System.out.println("END");
      Table.Table2.temp=0;
      return _ret;
      }
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      
      R _ret=null;
      
      n.f0.accept(this, argu);
      return _ret;
      
      
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      if(!Table.complete){
      n.f0.accept(this, argu);
      
      Table.class_list[Table.class_count].name= (String) n.f1.accept(this, argu);
      Table.class_list[Table.class_count].parent=false;
      
      n.f2.accept(this, argu);
      Table.class_list[Table.class_count].variables_obtained=false;
      
      n.f3.accept(this, argu);
      Table.class_list[Table.class_count].variables_obtained=true;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      
      Table.class_count++;
      return _ret;
      }
      else{
      n.f0.accept(this, argu);
      Table2.current_class=(String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      if(!Table.complete){
      n.f0.accept(this, argu);
      
      Table.class_list[Table.class_count].name= (String) n.f1.accept(this, argu);
      Table.class_list[Table.class_count].parent=true;
      
      n.f2.accept(this, argu);
      Table.class_list[Table.class_count].parent_name= (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      Table.class_list[Table.class_count].variables_obtained=false;
      
      n.f5.accept(this, argu);
      Table.class_list[Table.class_count].variables_obtained=true;
      
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      Table.class_count++;
      return _ret;
      }
      else{
      n.f0.accept(this, argu);
      Table2.current_class=(String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      if(!Table.complete){
      	if(Table.class_list[Table.class_count].variables_obtained==false)
      	{
      		Classes a=Table.class_list[Table.class_count];	
      	
      			a.var_list[a.var_count].type=(String) n.f0.accept(this, argu);
      			a.var_list[a.var_count].name=(String) n.f1.accept(this, argu);
      			n.f2.accept(this, argu);
      			a.var_count++;
      		
      	}
      	else
      	{	 Method a=Table.class_list[Table.class_count].method_list[Table.class_list[Table.class_count].method_count];
      			a.var_list[a.var_count].type=(String) n.f0.accept(this, argu);
      			a.var_list[a.var_count].name=(String) n.f1.accept(this, argu);
      			n.f2.accept(this, argu);
      			a.var_count++;
      	}
      	return _ret;
      }
      else{
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      if(!Table.complete){
      Classes C=Table.class_list[Table.class_count];
      C.method_list[C.method_count].type=(String) n.f0.accept(this, argu);
      
      
      C.method_list[C.method_count].return_type=(String) n.f1.accept(this, argu);
      C.method_list[C.method_count].name=(String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu); 
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      C.method_count++;
      return _ret;
      }
      else{
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Table2.current_method=(String) n.f2.accept(this, argu);
      hash_class h_C=Table2.class_map.get(Table2.current_class);
      hash_method h_M=h_C.method_map.get(Table2.current_method);
      System.out.println(Table2.current_class+"_"+Table2.current_method+" ["+(h_M.para_count+1)+"]");
      System.out.println("BEGIN");
      Table2.temp=h_M.para_count+h_M.var_count+1;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.println("RETURN TEMP "+Table2.temp);
      System.out.println("END");
      Table2.temp=0;
      return _ret;
      }

   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      
      if(!Table.complete){
      Method M=Table.class_list[Table.class_count].method_list[Table.class_list[Table.class_count].method_count];
      
      
      M.para_list[M.para_count].type=(String) n.f0.accept(this, argu);
      M.para_list[M.para_count].name=(String) n.f1.accept(this, argu);
      M.para_count++;
      return _ret;
      }
      else{
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
//      if(!Table.complete){
      return n.f0.accept(this, argu);
  //   }
    // else
     //{
     	//n.f0.accept(this, argu);
     	//return _ret;
     //}
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      return n.f0.accept(this, argu);
     //}
     //else
     //{
     	//n.f0.accept(this, argu);
     	//return _ret;
     //}
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) "int[]";
      
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      n.f0.accept(this, argu);
      return (R) "boolean";
      
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      n.f0.accept(this, argu);
      return (R) "int";
         
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      n.f0.accept(this, argu);
      return (R) "public";
      
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      n.f0.accept(this, argu);
      return (R) "private";
      
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      n.f0.accept(this, argu);
      return (R) "protected";
      
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
      }
      else{
      hash_class h_C=Table2.class_map.get(Table2.current_class);
      hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      
      
      String a =(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      Table2.temp++;
      
      if(h_M.var_map.containsKey(a))
      {	
      		System.out.print("MOVE ");
      		System.out.print("TEMP "+h_M.var_map.get(a)+" ");
      		System.out.println("TEMP "+(Table2.temp-1)+" ");
 
      }
      else if(h_M.para_map.containsKey(a))
      {
      		System.out.print("MOVE ");
      		System.out.print("TEMP "+h_M.para_map.get(a)+" ");
      		System.out.println("TEMP "+(Table2.temp-1)+" ");
      		
      }
      else
      {	
      		
      		
      		get_class_var_address(Table2, a, Table2.temp);
      		System.out.print("HSTORE ");
      		System.out.print("TEMP "+Table2.temp+" 0 ");
      		
      		System.out.println("TEMP "+(Table2.temp-1)+" ");
      		
      }
      Table2.temp--;
      return _ret;
      
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      }
      else
      {
      hash_class h_C=Table2.class_map.get(Table2.current_class);
      hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      
      
      String a =(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Table2.temp++;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      Table2.temp++;
      
      if(h_M.var_map.containsKey(a))
      {	
      		System.out.println("MOVE TEMP "+(Table2.temp+1)+"  TIMES TEMP "+(Table2.temp-2)+" 4");
      		System.out.println("MOVE TEMP "+(Table2.temp+2)+"  PLUS TEMP "+(Table2.temp+1)+" 4");
      		System.out.println("MOVE TEMP "+Table2.temp+"  PLUS TEMP "+h_M.var_map.get(a)+" TEMP "+(Table2.temp+2));
      		System.out.println("HSTORE TEMP "+Table2.temp+" 0 TEMP "+(Table2.temp-1));
      		
      }
      else if(h_M.para_map.containsKey(a))
      {
      		System.out.println("MOVE TEMP "+(Table2.temp+1)+"  TIMES TEMP "+(Table2.temp-2)+" 4");
      		System.out.println("MOVE TEMP "+(Table2.temp+2)+"  PLUS TEMP "+(Table2.temp+1)+" 4");
      		System.out.println("MOVE TEMP "+Table2.temp+"  PLUS TEMP "+h_M.para_map.get(a)+" TEMP "+(Table2.temp+2));
      		System.out.println("HSTORE TEMP "+Table2.temp+" 0 TEMP "+(Table2.temp-1));
      }
      else
      {      		
      		get_class_var_address(Table2, a, Table2.temp);
      		Table2.temp++;
      		System.out.println("HLOAD TEMP "+Table2.temp+" TEMP "+(Table2.temp-1)+" 0");
      		System.out.println("MOVE TEMP "+(Table2.temp+2)+"  TIMES TEMP "+(Table2.temp-3)+" 4");
      		System.out.println("MOVE TEMP "+(Table2.temp+3)+"  PLUS TEMP "+(Table2.temp+2)+" 4");
      		
      		System.out.println("MOVE TEMP "+(Table2.temp+1)+"  PLUS TEMP "+Table2.temp+" TEMP "+(Table2.temp+3));
      		System.out.println("HSTORE TEMP "+(Table2.temp+1)+" 0 TEMP "+(Table2.temp-2));
      		Table2.temp--;
      		
      }
      Table2.temp--;
      Table2.temp--;
      
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      else
      {
		n.f0.accept(this, argu);
      		n.f1.accept(this, argu);
      		n.f2.accept(this, argu);
      		Table2.temp++;
      		n.f3.accept(this, argu);
      		
      		
      		System.out.println("CJUMP TEMP "+(Table2.temp-1)+" L"+Table2.label);
      		int label=Table2.label;
      		Table2.label++;
      		Table2.temp--;
      		
      		n.f4.accept(this, argu);
      		System.out.println("L"+label);
      		System.out.println("NOOP");
      	
      		
      return _ret;
            
      }
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
      }
      else
      {	
      		n.f0.accept(this, argu);
      		n.f1.accept(this, argu);
      		n.f2.accept(this, argu);
      		Table2.temp++;
      		System.out.println("CJUMP TEMP "+(Table2.temp-1)+" L"+Table2.label);
      		int label1=Table2.label;
      		Table2.label++;
      		Table2.temp--;
      		
      		n.f3.accept(this, argu);
      		n.f4.accept(this, argu);
      		
      		System.out.println("JUMP L"+(Table2.label));
      		int label2=Table2.label;
      		Table2.label++;
      		System.out.println("L"+label1);
      		System.out.println("NOOP");
      		

      		
      		n.f5.accept(this, argu);
      		n.f6.accept(this, argu);
      		System.out.println("L"+label2);
      		System.out.println("NOOP");
      		
      		
      		return _ret;
            
      }
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      else
      {
      		System.out.println("L"+(Table2.label));
      		System.out.println("NOOP");
      		int label=Table2.label;
      		Table2.label++;
      		
		n.f0.accept(this, argu);
      		n.f1.accept(this, argu);
      		n.f2.accept(this, argu);
      		Table2.temp++;
      		
      		System.out.println("CJUMP TEMP "+(Table2.temp-1)+" L"+Table2.label);
      		int label2=Table2.label;
      		Table2.label++;
      		
      		Table2.temp--;
      		
      		n.f3.accept(this, argu);
      		n.f4.accept(this, argu);
      		System.out.println("JUMP L"+label);
      		System.out.println("L"+label2);
      		System.out.println("NOOP");
      		
      		
      return _ret;
            
      }
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      else
      {
		n.f0.accept(this, argu);
      		n.f1.accept(this, argu);
      		n.f2.accept(this, argu);
      		Table2.temp++;
      		n.f3.accept(this, argu);
      		n.f4.accept(this, argu);
      		
      		System.out.println("PRINT TEMP "+(Table2.temp-1));
      		Table2.temp--;
      return _ret;
            
      }
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      n.f0.accept(this, argu);
      
      return _ret;
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else{
      
      Table2.temp++;
      n.f0.accept(this, argu);
      System.out.println("MOVE TEMP "+(Table2.temp-1)+" TEMP "+(Table2.temp));
      System.out.println("CJUMP TEMP "+Table2.temp+" L"+Table2.label);
      int label1=Table2.label;
      Table2.label++;
      
      Table2.temp++;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      System.out.println("MOVE TEMP "+(Table2.temp-2)+" TEMP "+(Table2.temp));
      System.out.println("L"+label1);
      
      Table2.temp--;
      Table2.temp--;
      Table2.expr="boolean";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else{
      
      Table2.temp++;
      n.f0.accept(this, argu);
      System.out.println("MOVE TEMP "+(Table2.temp-1)+" TEMP "+(Table2.temp));
      System.out.println("MOVE TEMP "+(Table2.temp+1)+" 1");
      System.out.println("MOVE TEMP "+(Table2.temp+2)+" MINUS TEMP "+(Table2.temp+1)+" TEMP "+(Table2.temp));
      System.out.println("CJUMP TEMP "+(Table2.temp+2)+" L"+Table2.label);
      int label1=Table2.label;
      Table2.label++;
      
      
      Table2.temp++;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      System.out.println("MOVE TEMP "+(Table2.temp-2)+" TEMP "+(Table2.temp));
      System.out.println("L"+label1);
      
      Table2.temp--;
      Table2.temp--;
      Table2.expr="boolean";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else{
      Table2.temp++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Table2.temp++;
      n.f2.accept(this, argu);
      
      System.out.println("MOVE TEMP "+(Table2.temp-2)+" LE TEMP "+(Table2.temp-1)+" TEMP "+(Table2.temp));
      Table2.temp--;
      Table2.temp--;
      Table2.expr="boolean";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else{
      
      Table2.temp++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Table2.temp++;
      n.f2.accept(this, argu);
      
      System.out.println("MOVE TEMP "+(Table2.temp-2)+" NE TEMP "+(Table2.temp-1)+" TEMP "+(Table2.temp));
      Table2.temp--;
      Table2.temp--;
      Table2.expr="boolean";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else{
      
      Table2.temp++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Table2.temp++;
      n.f2.accept(this, argu);
      
      System.out.println("MOVE TEMP "+(Table2.temp-2)+" PLUS TEMP "+(Table2.temp-1)+" TEMP "+(Table2.temp));
      Table2.temp--;
      Table2.temp--;
      Table2.expr="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else{
      
      Table2.temp++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Table2.temp++;
      n.f2.accept(this, argu);
      
      System.out.println("MOVE TEMP "+(Table2.temp-2)+" MINUS TEMP "+(Table2.temp-1)+" TEMP "+(Table2.temp));
      Table2.temp--;
      Table2.temp--;
      Table2.expr="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else{
      
      Table2.temp++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Table2.temp++;
      n.f2.accept(this, argu);
      
      System.out.println("MOVE TEMP "+(Table2.temp-2)+" TIMES TEMP "+(Table2.temp-1)+" TEMP "+(Table2.temp));
      Table2.temp--;
      Table2.temp--;
      Table2.expr="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else{
      Table2.temp++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Table2.temp++;
      n.f2.accept(this, argu);
      
      System.out.println("MOVE TEMP "+(Table2.temp-2)+" DIV TEMP "+(Table2.temp-1)+" TEMP "+(Table2.temp));
      Table2.temp--;
      Table2.temp--;
      Table2.expr="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
      }
      else{
      
      Table2.temp++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Table2.temp++;
      n.f2.accept(this, argu);
      
      System.out.println("MOVE TEMP "+(Table2.temp+1)+" TIMES TEMP "+(Table2.temp)+" 4");
      System.out.println("MOVE TEMP "+(Table2.temp+2)+" PLUS TEMP "+(Table2.temp-1)+" TEMP "+(Table2.temp+1));
      System.out.println("MOVE TEMP "+(Table2.temp+3)+" PLUS TEMP "+(Table2.temp+2)+" 4");
      System.out.println("HLOAD TEMP "+(Table2.temp-2)+" TEMP "+(Table2.temp+3)+" 0");
      Table2.temp--;
      Table2.temp--;
      Table2.expr="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else{
      Table2.temp++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("HLOAD TEMP "+(Table2.temp-1)+" TEMP "+(Table2.temp)+" 0");
      
      Table2.temp--;
      Table2.expr="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
      }
      else
      {
      Table2.temp++;
      String a=(String) n.f0.accept(this, argu);
      String c=Table2.prim_expr;
      n.f1.accept(this, argu);
      String b=(String) n.f2.accept(this, argu);
      
      
      
      String called_class=Table2.called_class;
      String called_method=Table2.called_method;
      
      Table2.called_class=c;
      Table2.called_method=b;
      hash_class h_C=Table2.class_map.get(c);
      hash_method h_M;
      if(h_C.method_map.containsKey(b))
      {
      		h_M=h_C.method_map.get(b);
      }
      else
      {	while(true)
      		{	
      			System.out.println("HLOAD TEMP "+(Table2.temp+1)+" TEMP "+(Table2.temp)+" 0");
      			System.out.println("MOVE TEMP "+(Table2.temp) +" TEMP "+(Table2.temp+1));
      			String par=h_C.parent_name;
      			h_C=Table2.class_map.get(par);
      			Table2.called_class=par;
      			if(h_C.method_map.containsKey(b))
      			{
      				h_M=h_C.method_map.get(b);
      				break;	
      			}
      		
      		}
      }
      
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      Table2.temp++;
      System.out.println("MOVE TEMP "+Table2.temp+" "+Table2.called_class+"_"+Table2.called_method);
      System.out.print("MOVE TEMP "+(Table2.temp-(h_M.para_count+2))+" CALL TEMP "+Table2.temp+" ( ");
      for(int i=0;i<=h_M.para_count;i++)
      {
      	  System.out.print("TEMP "+(Table2.temp-(h_M.para_count+1-i))+" ");
      }
      System.out.println(")");
      Table2.temp=Table2.temp-(h_M.para_count+2);
      Table2.expr=h_M.return_type;
      Table2.called_class=called_class;
      Table2.called_method=called_method;
      return _ret;
      	
      	
      }
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      else{
      Table2.temp++;
      n.f0.accept(this, argu);
      System.out.println("CJUMP TEMP "+(Table2.temp)+" L"+Table2.label);
      int label1=Table2.label;
      Table2.label++;
      
      
      n.f1.accept(this, argu);
      Table2.temp++;
      n.f2.accept(this, argu);
      System.out.println("MOVE TEMP "+(Table2.temp-2)+" TEMP "+Table2.temp);
      System.out.println("JUMP L"+(Table2.label));
      int label2=Table2.label;
      Table2.label++;
      
      n.f3.accept(this, argu);
      System.out.println("L"+label1);
      System.out.println("NOOP");
      
      Table2.temp++;
      n.f4.accept(this, argu);
      
      System.out.println("MOVE TEMP "+(Table2.temp-3)+" TEMP "+Table2.temp);
      System.out.println("L"+label2);
      System.out.println("NOOP");
      
       Table2.temp--;
       Table2.temp--;
       Table2.temp--;
      Table2.expr=Table2.prim_expr;
      return _ret;
      
      }
      
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      else
   {	
   	Table2.temp++;	
   	n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
   	return _ret;
   	}
   }
   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
   	else
   	{
   	n.f0.accept(this, argu);
   	Table2.temp++;
      	n.f1.accept(this, argu);
     	 return _ret;
      
   	}
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      boolean in_prim_expr=Table2.in_prim_expr;
      Table2.in_prim_expr=true;
      String a=(String) n.f0.accept(this, argu);
      Table2.in_prim_expr=in_prim_expr;
      
      return (R) a;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      n.f0.accept(this, argu);
      return _ret;
      }
      else
      {
      String a =(String) n.f0.accept(this, argu);
      System.out.println("MOVE TEMP "+Table2.temp+" "+a);
      Table2.prim_expr="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      n.f0.accept(this, argu);
      //Table2.prim_expr_type="int";
      return _ret;
      }
      else
      {
      n.f0.accept(this, argu);
      System.out.println("MOVE TEMP "+Table2.temp+" 1");
      Table2.prim_expr="boolean";
      return _ret;
      
      }   
}

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      n.f0.accept(this, argu);
      //Table2.prim_expr_type="int";
      
      return _ret;
      }
      
      else
      {
      n.f0.accept(this, argu);
      System.out.println("MOVE TEMP "+Table2.temp+" 0");
            Table2.prim_expr="boolean";
            return _ret;
      
      }
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      if(!Table.complete){
      return n.f0.accept(this, argu);
      }
      
      else
      {
      	String a =(String) n.f0.accept(this, argu);
      	if(Table2.in_prim_expr==true)
      	{
      		hash_class h_C=Table2.class_map.get(Table2.current_class);
      		hash_method h_M=h_C.method_map.get(Table2.current_method);
      		
      		if(h_M.var_map.containsKey(a))
      		{
      			System.out.println("MOVE TEMP "+Table2.temp+" TEMP "+h_M.var_map.get(a));
      		}
      		else if(h_M.para_map.containsKey(a))
      		{
      			System.out.println("MOVE TEMP "+Table2.temp+" TEMP "+h_M.para_map.get(a));
      		}
      		else
      		{
      			get_class_var_address(Table2,a,(Table2.temp+1));
      			System.out.println("HLOAD TEMP "+Table2.temp+" TEMP "+(Table2.temp+1)+" 0");
      		}
      	
      	}
      	if(Table2.in_prim_expr==true && Table2.current_class!="Main")
      	{
      		String c="";
      		hash_class h_C=Table2.class_map.get(Table2.current_class);
      		hash_method h_M=h_C.method_map.get(Table2.current_method);
      		if(h_M.var_map2.containsKey(a))
      		{
      
     		 c=h_M.var_map2.get(a);
      		}		
      		else if(h_M.para_map2.containsKey(a))
      		{
      		c=h_M.para_map2.get(a);
      		}
      		else
      		{
      			 while(true)
       		{			
       			if(h_C.class_vars2.containsKey(a))
       			{
       			c=h_C.class_vars2.get(a);
       			break;
       			}
       			String par=h_C.parent_name;
       			h_C=Table2.class_map.get(par);
       		}
      		}
      		Table2.prim_expr=c;
      	}
      	
      return (R) a;
      
      }
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      n.f0.accept(this, argu);
      //Table2.prim_expr_type="int";
      return _ret;
      }
      else
      {
       System.out.println("MOVE TEMP "+Table2.temp+" TEMP 0");
      n.f0.accept(this, argu);
	Table2.prim_expr=Table2.current_class;
      return (R) "this";
      
      }
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      else
      {
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Table2.temp++;
      boolean in_prim_expr=Table2.in_prim_expr;
      Table2.in_prim_expr=false;
      n.f3.accept(this, argu);
      Table2.in_prim_expr=in_prim_expr;
      
      System.out.println("MOVE TEMP "+(Table2.temp+2)+" PLUS TEMP "+Table2.temp+" 1");
      System.out.println("MOVE TEMP "+(Table2.temp+1)+" TIMES TEMP "+(Table2.temp+2)+" 4");
      System.out.println("MOVE TEMP "+(Table2.temp-1)+" HALLOCATE TEMP "+(Table2.temp+1));
      System.out.println("HSTORE TEMP "+(Table2.temp-1)+" 0 TEMP "+Table2.temp);
      Table2.temp--;
      n.f4.accept(this, argu);
      Table2.prim_expr="int[]";
      return _ret;
      
      }
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
      }
      
      else
      {
      n.f0.accept(this, argu);
      boolean in_prim_expr=Table2.in_prim_expr;
      Table2.in_prim_expr=false;
      String a=(String) n.f1.accept(this, argu);
      Table2.in_prim_expr=in_prim_expr;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      Table2.called_class=a;
      allocate(Table2,a,Table2.temp);
      Table2.prim_expr=a;
      return (R) ("#new "+a);
      
      }
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      else
      {
      	n.f0.accept(this, argu);
      	Table2.temp++;
      	boolean in_prim_expr=Table2.in_prim_expr;
     	Table2.in_prim_expr=false;
        n.f1.accept(this, argu);
        Table2.in_prim_expr=in_prim_expr;
      	System.out.println("MOVE TEMP "+(Table2.temp+1)+" 1");
      	System.out.println("MOVE TEMP "+(Table2.temp-1)+" MINUS TEMP "+(Table2.temp+1)+" TEMP "+Table2.temp);
      	Table2.temp--;
      	Table2.prim_expr="boolean";
      	return _ret;
      	
      }
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else
      {
      n.f0.accept(this, argu);
      boolean in_prim_expr=Table2.in_prim_expr;
      Table2.in_prim_expr=false;
      n.f1.accept(this, argu);
      Table2.in_prim_expr=in_prim_expr;
      n.f2.accept(this, argu);
      Table2.prim_expr=Table2.expr;
      return _ret;
      
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }
   
   public R get_class_var_address(hash_table Table2,String a, int temp)
   {
   	hash_class h_C=Table2.class_map.get(Table2.current_class);
   	
   	if(h_C.class_vars.containsKey(a))
   	{
   		System.out.println("MOVE TEMP "+(temp+2)+" "+h_C.class_vars.get(a));
   		System.out.println("MOVE TEMP "+(temp+1)+" TIMES TEMP "+(temp+2)+" 4");
   		System.out.println("MOVE TEMP "+temp+" PLUS TEMP 0 TEMP "+(temp+1));
   	}
   	else
   	{
   		System.out.println("MOVE TEMP "+(temp+1)+" TEMP 0");
   		while(true)
   		{
   			System.out.println("HLOAD TEMP "+(temp+2)+" TEMP "+(temp+1)+" 0");
   			String par=h_C.parent_name;
   			h_C=Table2.class_map.get(par);
   			if(h_C.class_vars.containsKey(a))
   			{
   				System.out.println("MOVE TEMP "+(temp+4)+" "+h_C.class_vars.get(a));
   				System.out.println("MOVE TEMP "+(temp+3)+" TIMES TEMP "+(temp+4)+" 4");
   				System.out.println("MOVE TEMP "+temp+" PLUS TEMP "+(temp+2)+" TEMP "+(temp+3));
   				break;		
   			}
   			System.out.println("MOVE TEMP "+(temp+1)+" TEMP "+(temp+2));
   		}
   	}
   	return null;
   }
   
   public R allocate(hash_table Table2,String a, int temp)
   {
   	
   	hash_class h_C=Table2.class_map.get(a);
   	if(h_C.parent)
   	{
   		allocate(Table2,h_C.parent_name,(temp+1));
   		System.out.println("MOVE TEMP "+(temp+2)+" "+(h_C.var_count+1));
   		System.out.println("MOVE TEMP "+(temp+3)+" TIMES TEMP "+(temp+2)+" 4");
   		System.out.println("MOVE TEMP "+temp+" HALLOCATE TEMP "+(temp+3));
   		System.out.println("HSTORE TEMP "+temp+" 0 TEMP "+(temp+1));
   		
   		if(h_C.var_count>0){
   		System.out.println("MOVE TEMP "+(temp+2)+" MINUS TEMP "+(temp+3)+" 1");
   		System.out.println("MOVE TEMP "+(temp+1)+" 4");
   		System.out.println("L"+Table2.label);
   		int label1=Table2.label;
   		Table2.label++;
   		
   		System.out.println("MOVE TEMP "+(temp+3)+" LE TEMP "+(temp+1)+" TEMP "+(temp+2));
   		System.out.println("CJUMP TEMP "+(temp+3)+" L"+Table2.label);
   		int label2=Table2.label;
   		Table2.label++;
   		
   		System.out.println("MOVE TEMP "+(temp+4)+" PLUS TEMP "+(temp)+" TEMP "+(temp+1));
   		System.out.println("MOVE TEMP "+(temp+5)+" 0");
   		System.out.println("HSTORE TEMP "+(temp+4)+" 0 TEMP "+(temp+5));
   		System.out.println("MOVE TEMP "+(temp+4)+" 4");
   		System.out.println("MOVE TEMP "+(temp+5)+" PLUS TEMP "+(temp+1)+" TEMP "+(temp+4));
   		System.out.println("MOVE TEMP "+(temp+1)+" TEMP "+(temp+5));
   		System.out.println("JUMP L"+label1);
   		System.out.println("L"+label2);
   		System.out.println("NOOP");
   		}
   		
   	}
   	else
   	{
   		System.out.println("MOVE TEMP "+(temp+2)+" "+(h_C.var_count+1));
   		System.out.println("MOVE TEMP "+(temp+3)+" TIMES TEMP "+(temp+2)+" 4");
   		System.out.println("MOVE TEMP "+temp+" HALLOCATE TEMP "+(temp+3));
   		
   		if(h_C.var_count>0){
   		System.out.println("MOVE TEMP "+(temp+2)+" MINUS TEMP "+(temp+3)+" 1");
   		System.out.println("MOVE TEMP "+(temp+1)+" 4");
   		System.out.println("L"+Table2.label);
   		int label1=Table2.label;
   		Table2.label++;
   		
   		System.out.println("MOVE TEMP "+(temp+3)+" LE TEMP "+(temp+1)+" TEMP "+(temp+2));
   		System.out.println("CJUMP TEMP "+(temp+3)+" L"+Table2.label);
   		int label2=Table2.label;
   		Table2.label++;
   		
   		System.out.println("MOVE TEMP "+(temp+4)+" PLUS TEMP "+(temp)+" TEMP "+(temp+1));
   		System.out.println("MOVE TEMP "+(temp+5)+" 0");
   		System.out.println("HSTORE TEMP "+(temp+4)+" 0 TEMP "+(temp+5));
   		System.out.println("MOVE TEMP "+(temp+4)+" 4");
   		System.out.println("MOVE TEMP "+(temp+5)+" PLUS TEMP "+(temp+1)+" TEMP "+(temp+4));
   		System.out.println("MOVE TEMP "+(temp+1)+" TEMP "+(temp+5));
   		System.out.println("JUMP L"+label1);
   		System.out.println("L"+label2);
   		System.out.println("NOOP");
   		}
   	}
   	return null;
   }
   
}



