//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public boolean inside_label;
   public boolean in_exp;
   public int exp_type;
   public int sim_exp_type;
   public boolean move_into;
   public String move_reg;
   public int arg_count;
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      
      inside_label=false;
      in_exp=false;
      move_into=false;
      System.out.println("        .text");
      System.out.println("        .globl        main");
      System.out.println("main:");
      
      n.f0.accept(this);
      n.f1.accept(this);
      String c=(String)n.f2.accept(this);
      arg_count=Integer.parseInt(c);
      n.f3.accept(this);
      n.f4.accept(this);
      String a=(String)n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      
      System.out.println("        move $fp, $sp");
      System.out.println("        subu $sp, $sp, "+(4*(2+Integer.parseInt(a))));
      System.out.println("        sw $ra, -4($fp)");
      n.f10.accept(this);
      n.f11.accept(this);
      System.out.println("        lw $ra, -4($fp)");
      System.out.println("        addu $sp, $sp, "+(4*(2+Integer.parseInt(a))));
      System.out.println("        jal _exitret");
      System.out.println();
      
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
       	 System.out.println("        .text"); 
 	 System.out.println("        .globl _halloc"); 
 	 System.out.println("_halloc: ");
 	 System.out.println("        li $v0, 9 ");
 	 System.out.println("        syscall"); 
 	 System.out.println("        jr $ra"); 
 	 System.out.println();        
	 System.out.println();        
 	 System.out.println("        .text"); 
 	 System.out.println("        .globl _error"); 
 	 System.out.println("_error:"); 
 	 System.out.println("        li $v0, 4");
 	 System.out.println("        syscall");
 	 System.out.println("        li $v0, 10");
 	 System.out.println("        syscall");
 	 System.out.println();
	 System.out.println();        
 	 System.out.println("        .text"); 
 	 System.out.println("        .globl _print"); 
 	 System.out.println("_print:"); 
 	 System.out.println("        li $v0, 1"); 
 	 System.out.println("        syscall"); 
 	 System.out.println("        la $a0, newline"); 
 	 System.out.println("        li $v0, 4"); 
 	 System.out.println("        syscall"); 
 	 System.out.println("        jr $ra"); 
 	 System.out.println(); 
	 System.out.println();
 	 System.out.println("        .text"); 
 	 System.out.println("        .globl _exitret"); 
 	 System.out.println("_exitret:"); 
 	 System.out.println("        li $v0, 10");
 	 System.out.println("        syscall"); 
 	 System.out.println("        .data");
 	 System.out.println("        .align 0");
 	 System.out.println("newline: 	.asciiz \"\\n\"");
	 System.out.println();
 	 System.out.println("        .data");
 	 System.out.println("        .align 0");
 	 System.out.println("error_msg:	.asciiz \" ERROR : Abnormally terminated!\\n \"");
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      inside_label=true;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n) {
      R _ret=null;
      
      inside_label=false;
      
      String a=(String)n.f0.accept(this);
      n.f1.accept(this);
      String b=(String)n.f2.accept(this);
      arg_count=Integer.parseInt(b);
      n.f3.accept(this);
      n.f4.accept(this);
      String c=(String)n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      
      System.out.println("        .text");
      System.out.println("        .globl        "+a);
      System.out.println(a+":");
      System.out.println("        sw $fp, -8($sp)");
      System.out.println("        move $fp, $sp");
      System.out.println("        subu $sp, $sp, "+(4*(2+Integer.parseInt(c))));
      System.out.println("        sw $ra, -4($fp)");
      
      n.f10.accept(this);
      n.f11.accept(this);
      
      System.out.println("        lw $ra, -4($fp)");
      System.out.println("        lw $fp, -8($fp)");
      System.out.println("        addu $sp, $sp, "+(4*(2+Integer.parseInt(c))));
      System.out.println("        jr $ra");
      System.out.println();
      n.f12.accept(this);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      inside_label=false;
      n.f0.accept(this);
      inside_label=true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      System.out.println("        nop");
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      
      System.out.println("        jal _error");
    
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String a=(String)n.f1.accept(this);
      String b=(String)n.f2.accept(this);
      
      System.out.println("        bne "+a+" 1 "+b);
      
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String a=(String)n.f1.accept(this);
      
      System.out.println("        j "+a);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String a=(String)n.f1.accept(this);
      String b=(String)n.f2.accept(this);
      String c=(String)n.f3.accept(this);
      
      System.out.println("        sw "+c+", "+b+"("+a+")");
      
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String a=(String)n.f1.accept(this);
      String b=(String)n.f2.accept(this);
      String c=(String)n.f3.accept(this);
      System.out.println("        lw "+a+", "+c+"("+b+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String a=(String)n.f1.accept(this);
      move_into=true;
      move_reg=a;
      String b=(String)n.f2.accept(this);
      move_into=false;
      
      if(exp_type==3)
      {
      	if(sim_exp_type==1)
      	{
      		System.out.println("        move "+a+", "+b);
      	}
      	if(sim_exp_type==2)
      	{
      		System.out.println("        li "+a+", "+b);
      	}
      	if(sim_exp_type==3)
      	{
      		System.out.println("        la "+a+", "+b);
      	}
      }
      
      
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String a=(String)n.f1.accept(this);
      if(sim_exp_type==1)
      {
      	
        System.out.println("        subu $sp, $sp, "+4);
      	System.out.println("        sw $a0, 0($sp)");
      	if(a.compareTo("$a0")!=0)
      	System.out.println("        move $a0, "+a);
      	System.out.println("        jal _print");
      	
      	System.out.println("        lw $a0, 0($sp)");
      	System.out.println("        addu $sp, $sp, "+4);
      }
      else if(sim_exp_type==2)
      {
      	System.out.println("        subu $sp, $sp, "+4);
      	System.out.println("        sw $a0, 0($sp)");
      	
      	System.out.println("        li $a0, "+a);
      	System.out.println("        jal _print");
      	
      	System.out.println("        lw $a0, 0($sp)");
      	System.out.println("        addu $sp, $sp, "+4);
      
      }
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String a=(String)n.f1.accept(this);
      String b=(String)n.f2.accept(this);
      
      if(arg_count>4 && Integer.parseInt(b)<arg_count-4)
      	System.out.println("        lw "+a+", -"+(4*(3+Integer.parseInt(b)))+"($fp)");
      else if(arg_count>4)
      	System.out.println("        lw "+a+", "+(4*(Integer.parseInt(b)-arg_count+4))+"($sp)");
      else
        System.out.println("        lw "+a+", "+(4*(Integer.parseInt(b)))+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String b=(String)n.f1.accept(this);
      String a=(String)n.f2.accept(this);
      
      if(arg_count>4 && Integer.parseInt(b)<arg_count-4)
      	System.out.println("        sw "+a+", -"+(4*(3+Integer.parseInt(b)))+"($fp)");
      else if (arg_count>4)
      	System.out.println("        sw "+a+", "+(4*(Integer.parseInt(b)-arg_count+4))+"($sp)");
      else 
        System.out.println("        sw "+a+", "+(4*(Integer.parseInt(b)))+"($sp)");
      
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String a=(String)n.f1.accept(this);
      String b=(String)n.f2.accept(this);
      
      System.out.println("        sw "+b+", -"+(4*(2+Integer.parseInt(a)))+"($sp)");
      
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String a=(String)n.f1.accept(this);
      if(sim_exp_type==1)
      {
      	System.out.println("        jalr "+a);
      }
      else if(sim_exp_type==3)
      {
      	System.out.println("        jal "+a);
      }
      
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
      in_exp=true;
      String a=(String)n.f0.accept(this);
      in_exp=false;
      return (R) a;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      if(in_exp)
      exp_type=1;
      in_exp=false;
      n.f0.accept(this);
      in_exp=false;
      String a=(String)n.f1.accept(this);
      if(sim_exp_type==1)
      {
      	System.out.println("        subu $sp, $sp, "+4);
      	System.out.println("        sw $a0, 0($sp)");
      	if(a.compareTo("$a0")!=0)
      	System.out.println("        move $a0, "+a);
      	System.out.println("        jal _halloc");
      	System.out.println("        move "+a+", "+"$v0");
      	System.out.println("        lw $a0, 0($sp)");
      	System.out.println("        addu $sp, $sp, "+4);
      
      }
      else if(sim_exp_type==2)
      {
      	System.out.println("        subu $sp, $sp, "+4);
      	System.out.println("        sw $a0, 0($sp)");
      	
      	System.out.println("        li $a0, "+a);
      	System.out.println("        jal _halloc");
      	System.out.println("        move "+a+", "+"$v0");
      	System.out.println("        lw $a0, 0($sp)");
      	System.out.println("        addu $sp, $sp, "+4);
      
      }
      
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      if(in_exp)
      exp_type=2;
      in_exp=false;
      String a=(String)n.f0.accept(this);
      String b=(String)n.f1.accept(this);
      String c=(String)n.f2.accept(this);
      
      if(a.compareTo("PLUS")==0)
      {
      	 if(sim_exp_type==1)
      	 {
      	 	System.out.println("        add "+move_reg+", "+b+", "+c);
      	 }
      	 if(sim_exp_type==2)
      	 {
      	 	System.out.println("        addi "+move_reg+", "+b+", "+c);
      	 }
      }
      if(a.compareTo("MINUS")==0)
      {
      	 if(sim_exp_type==1)
      	 {
      	 	System.out.println("        sub "+move_reg+", "+b+", "+c);
      	 }
      	 if(sim_exp_type==2)
      	 {
      	 	System.out.println("        subu "+move_reg+", "+b+", "+c);
      	 }
      }
      if(a.compareTo("DIV")==0)
      {
      	 	System.out.println("        div , "+b+", "+c);
      	 	System.out.println("        mflo , "+move_reg);
      }
      if(a.compareTo("TIMES")==0)
      {
      	 	System.out.println("        mult , "+b+", "+c);
      	 	System.out.println("        mflo , "+move_reg);
      }
      if(a.compareTo("LE")==0)
      {	
      		if(sim_exp_type==1)
      		System.out.println("        slt "+move_reg+", "+c+", "+b);
      		if(sim_exp_type==2)
      		System.out.println("        slti "+move_reg+", "+c+", "+b);
      		
      		if(move_reg.compareTo("$t0")==0)
      		{
      		System.out.println("        sw $t1, -4($sp)");
      		System.out.println("        li $t1 1");
      		System.out.println("        sub "+move_reg+", "+"$t1, "+move_reg);
      		System.out.println("        lw $t1, -4($sp)");
      		}
      		if(move_reg.compareTo("$t0")!=0)
      		{
      		System.out.println("        sw $t0, -4($sp)");
      		System.out.println("        li $t0 1");
      		System.out.println("        sub "+move_reg+", "+"$t0, "+move_reg);
      		System.out.println("        lw $t0, -4($sp)");
      		}
      }
      if(a.compareTo("NE")==0)
      {
      		if(sim_exp_type==1)
      		System.out.println("        xor "+move_reg+", "+b+", "+c);
      		if(sim_exp_type==2)
      		System.out.println("        xori "+move_reg+", "+b+", "+c);
      		
      		
      		System.out.println("        slt "+move_reg+", "+"$0, "+move_reg);
      		
      }
      
      
      
      
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n) {
      R _ret=null;
      String a=(String)n.f0.accept(this);
      return (R) a;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n) {
      R _ret=null;
      n.f0.accept(this);
      String b=(String)n.f1.accept(this);
      return (R) b;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      if(in_exp)
      exp_type=3;
      String a=(String)n.f0.accept(this);
      return (R) a;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n) {
      R _ret=null;
      sim_exp_type=1;
      String a=(String) n.f0.accept(this);
      return (R) ("$"+a);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      sim_exp_type=2;
      String a=(String) n.f0.accept(this);
      return (R) a;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      sim_exp_type=3;
      String a=(String) n.f0.accept(this);
      
      if(inside_label)
      System.out.print(a+":");
      
      return (R) a;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

}
