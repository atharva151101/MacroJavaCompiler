//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
      
      
   }

   public R visit(NodeListOptional n, A argu) {
      
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
        
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      return _ret;
      
      
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      
      combined Table= (combined) argu;
      if(!Table.Table1.complete){
      n.f0.accept(this, argu);
      Table.Table1.Main_class=(String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
      }
      else if(Table.Table2.type_check==false)
      {
      return _ret;
      }
      else{
      
      n.f0.accept(this, argu);
   	Table.Table2.current_class="main";
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      Table.Table2.current_method="main";
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      
      R _ret=null;
      
      n.f0.accept(this, argu);
      return _ret;
      
      
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      if(!Table.complete){
      n.f0.accept(this, argu);
      
      Table.class_list[Table.class_count].name= (String) n.f1.accept(this, argu);
      Table.class_list[Table.class_count].parent=false;
      
      n.f2.accept(this, argu);
      Table.class_list[Table.class_count].variables_obtained=false;
      
      n.f3.accept(this, argu);
      Table.class_list[Table.class_count].variables_obtained=true;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      
      Table.class_count++;
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      n.f0.accept(this, argu);
      Table2.current_class=(String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      if(!Table.complete){
      n.f0.accept(this, argu);
      
      Table.class_list[Table.class_count].name= (String) n.f1.accept(this, argu);
      Table.class_list[Table.class_count].parent=true;
      
      n.f2.accept(this, argu);
      Table.class_list[Table.class_count].parent_name= (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      Table.class_list[Table.class_count].variables_obtained=false;
      
      n.f5.accept(this, argu);
      Table.class_list[Table.class_count].variables_obtained=true;
      
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      Table.class_count++;
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      n.f0.accept(this, argu);
      Table2.current_class=(String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      if(!Table.complete){
      	if(Table.class_list[Table.class_count].variables_obtained==false)
      	{
      		Classes a=Table.class_list[Table.class_count];	
      	
      			a.var_list[a.var_count].type=(String) n.f0.accept(this, argu);
      			a.var_list[a.var_count].name=(String) n.f1.accept(this, argu);
      			n.f2.accept(this, argu);
      			a.var_count++;
      		
      	}
      	else
      	{	 Method a=Table.class_list[Table.class_count].method_list[Table.class_list[Table.class_count].method_count];
      			a.var_list[a.var_count].type=(String) n.f0.accept(this, argu);
      			a.var_list[a.var_count].name=(String) n.f1.accept(this, argu);
      			n.f2.accept(this, argu);
      			a.var_count++;
      	}
      	return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      if(!Table.complete){
      Classes C=Table.class_list[Table.class_count];
      C.method_list[C.method_count].type=(String) n.f0.accept(this, argu);
      
      
      C.method_list[C.method_count].return_type=(String) n.f1.accept(this, argu);
      C.method_list[C.method_count].name=(String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu); 
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      C.method_count++;
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Table2.current_method=(String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      hash_class h_C=Table2.class_map.get(Table2.current_class);
      hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      //System.out.println("sa "+Table2.expr_type);
      if(h_M.return_type!=Table2.expr_type){Table2.type_check=false;}
     
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
      }

   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      
      if(!Table.complete){
      Method M=Table.class_list[Table.class_count].method_list[Table.class_list[Table.class_count].method_count];
      
      
      M.para_list[M.para_count].type=(String) n.f0.accept(this, argu);
      M.para_list[M.para_count].name=(String) n.f1.accept(this, argu);
      M.para_count++;
      return _ret;
      }
      else{
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
//      if(!Table.complete){
      return n.f0.accept(this, argu);
  //   }
    // else
     //{
     	//n.f0.accept(this, argu);
     	//return _ret;
     //}
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      return n.f0.accept(this, argu);
     //}
     //else
     //{
     	//n.f0.accept(this, argu);
     	//return _ret;
     //}
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) "int[]";
      
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      n.f0.accept(this, argu);
      return (R) "boolean";
      
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      n.f0.accept(this, argu);
      return (R) "int";
         
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      n.f0.accept(this, argu);
      return (R) "public";
      
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      n.f0.accept(this, argu);
      return (R) "private";
      
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      //if(!Table.complete){
      n.f0.accept(this, argu);
      return (R) "protected";
      
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      
      hash_class h_C=Table2.class_map.get(Table2.current_class);
      hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      String a=(String) n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      
      n.f2.accept(this, argu);
      
      n.f3.accept(this, argu);
      
      if(h_M.var_map.containsKey(a)==false)
      {
      	Table2.type_check=false;	
      }
      else
      {
      	String b=h_M.var_map.get(a);
      	
      	if(b!=Table2.expr_type)
      	{
      		if(Table2.class_map.containsKey(Table2.expr_type)==false)
      		Table2.type_check=false;
      	
      	
      		else
      		{
      			hash_class hh_C=Table2.class_map.get(Table2.expr_type);
      			if(hh_C.parents.containsKey(b)==false)
      				Table2.type_check=false;
      		}	
      	}
     } 	
      
      return _ret;
      
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(Table.complete==true){
      hash_class h_C=Table2.class_map.get(Table2.current_class);
      hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      String a =(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String b=Table2.expr_type;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      String c=Table2.expr_type;
      n.f6.accept(this, argu);
      if(h_M.var_map.containsKey(a)==false)
      {
      	Table2.type_check=false;	
      }
      else
      {
      	a=h_M.var_map.get(a);
      	
      	if(b!="int" || c!="int" || a!="int[]")
      	Table2.type_check=false;
      }
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      //hash_class h_C=Table2.class_map.get(Table2.current_class);
      //hash_method h_M=h_C.method_map.get(Table2.current_method);
      
		n.f0.accept(this, argu);
      		n.f1.accept(this, argu);
      		n.f2.accept(this, argu);
      		String b=Table2.expr_type;
      		if(b!="boolean")
      		Table2.type_check=false;
      		n.f3.accept(this, argu);
      		n.f4.accept(this, argu);
      return _ret;
            
      }
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      //hash_class h_C=Table2.class_map.get(Table2.current_class);
      //hash_method h_M=h_C.method_map.get(Table2.current_method);
      
		n.f0.accept(this, argu);
      		n.f1.accept(this, argu);
      		n.f2.accept(this, argu);
      		String b=Table2.expr_type;
      		if(b!="boolean")
      		Table2.type_check=false;
      		n.f3.accept(this, argu);
      		n.f4.accept(this, argu);
      		n.f5.accept(this, argu);
      		n.f6.accept(this, argu);
      		return _ret;
            
      }
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      hash_class h_C=Table2.class_map.get(Table2.current_class);
      hash_method h_M=h_C.method_map.get(Table2.current_method);
      
		n.f0.accept(this, argu);
      		n.f1.accept(this, argu);
      		n.f2.accept(this, argu);
      		String b=Table2.expr_type;
      		if(b!="boolean")
      		Table2.type_check=false;
      		n.f3.accept(this, argu);
      		n.f4.accept(this, argu);
      return _ret;
            
      }
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
    //  hash_class h_C=Table2.class_map.get(Table2.current_class);
     // hash_method h_M=h_C.method_map.get(Table2.current_method);
      
		n.f0.accept(this, argu);
      		n.f1.accept(this, argu);
      		n.f2.accept(this, argu);
      		String b=Table2.expr_type;
      		if(b!="int")
      		Table2.type_check=false;
      		n.f3.accept(this, argu);
      		n.f4.accept(this, argu);
      return _ret;
            
      }
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      boolean in_expr=Table2.in_expr;
      Table2.in_expr=true;
      n.f0.accept(this, argu);
      Table2.in_expr=in_expr;
      return _ret;
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      //hash_class h_C=Table2.class_map.get(Table2.current_class);
     // hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      n.f0.accept(this, argu);
      String a=Table2.prim_expr_type;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String b=Table2.prim_expr_type;
      if(a!="boolean" || b!="boolean")
      Table2.type_check=false;
      
      Table2.expr_type="boolean";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      //hash_class h_C=Table2.class_map.get(Table2.current_class);
      //hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      n.f0.accept(this, argu);
      String a=Table2.prim_expr_type;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String b=Table2.prim_expr_type;
      if(a!="boolean" || b!="boolean")
      Table2.type_check=false;
      
      Table2.expr_type="boolean";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      //hash_class h_C=Table2.class_map.get(Table2.current_class);
      //hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      n.f0.accept(this, argu);
      String a=Table2.prim_expr_type;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String b=Table2.prim_expr_type;
      if(a!="int" || b!="int")
      Table2.type_check=false;
      
      Table2.expr_type="boolean";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      //hash_class h_C=Table2.class_map.get(Table2.current_class);
      //hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      n.f0.accept(this, argu);
      String a=Table2.prim_expr_type;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String b=Table2.prim_expr_type;
      if(a!=b)
      Table2.type_check=false;
      
      Table2.expr_type="boolean";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      //hash_class h_C=Table2.class_map.get(Table2.current_class);
      //hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      n.f0.accept(this, argu);
      String a=Table2.prim_expr_type;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String b=Table2.prim_expr_type;
      if(a!="int" || b!="int")
      Table2.type_check=false;
      
      Table2.expr_type="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      //hash_class h_C=Table2.class_map.get(Table2.current_class);
      //hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      n.f0.accept(this, argu);
      String a=Table2.prim_expr_type;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String b=Table2.prim_expr_type;
      if(a!="int" || b!="int")
      Table2.type_check=false;
      
      Table2.expr_type="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      //hash_class h_C=Table2.class_map.get(Table2.current_class);
      //hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      n.f0.accept(this, argu);
      String a=Table2.prim_expr_type;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String b=Table2.prim_expr_type;
      if(a!="int" || b!="int")
      Table2.type_check=false;
      
      Table2.expr_type="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      //hash_class h_C=Table2.class_map.get(Table2.current_class);
      //hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      n.f0.accept(this, argu);
      String a=Table2.prim_expr_type;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String b=Table2.prim_expr_type;
      if(a!="int" || b!="int")
      Table2.type_check=false;
      
      Table2.expr_type="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      //hash_class h_C=Table2.class_map.get(Table2.current_class);
      //hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      n.f0.accept(this, argu);
      String a=Table2.prim_expr_type;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String b=Table2.prim_expr_type;
      if(a!="int[]" || b!="int")
      Table2.type_check=false;
      
      Table2.expr_type="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      //hash_class h_C=Table2.class_map.get(Table2.current_class);
      //hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      n.f0.accept(this, argu);
      String a=Table2.prim_expr_type;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      //String b=Table2.prim_expr_type;
      if(a!="int[]")
      Table2.type_check=false;
      
      Table2.expr_type="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      	
      	//hash_class h_C=Table2.class_map.get(Table2.current_class);
      	//hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      	
      	n.f0.accept(this, argu);
      	
      	
      	String a=Table2.prim_expr_type;
      	
      	if(Table2.class_map.containsKey(a)==false)
      	{
      		Table2.type_check=false;
      		
      		n.f1.accept(this, argu);
      		n.f2.accept(this, argu);
      		n.f3.accept(this, argu);
      		n.f4.accept(this, argu);
      		n.f5.accept(this, argu);
      		return _ret;	
      	}
      	else
      	{
      		hash_class h_C;
      		hash_method h_M=new hash_method();
      	
      		String called_class=Table2.called_class;
      		String called_method=Table2.called_method;
      		Table2.called_class=a;
      		h_C=Table2.class_map.get(Table2.called_class);
      		//System.out.println(Table2.current_class + Table2.current_method);	
      		n.f1.accept(this, argu);
	      	String b=(String) n.f2.accept(this, argu);
	      	
	      	int flag=2;
	      	if(h_C.method_map.containsKey(b))
	      	{
	      		h_M=h_C.method_map.get(b);flag=1;
	      	}
	      	else
	      	{	
	      		hash_class temp=h_C;
	      		while(temp.parent==true)
	      		{
	      			temp=Table2.class_map.get(temp.parent_name);
	      			Table2.called_class=temp.name;
	      			if(temp.method_map.containsKey(b))
	      			{	
	      			h_M=temp.method_map.get(b);flag=0;
	      			break;
	      			}			
	      		}
	      	}
	      	
	      	if(flag==2)
	      	{	
	      		Table2.type_check=false;
	      		
	      		Table2.called_class=called_class;
      			Table2.called_method=called_method;
	      		n.f3.accept(this, argu);
      			n.f4.accept(this, argu);
      			n.f5.accept(this, argu);
      			return _ret;
	      	}
	      	if(flag==1)
	      	{
	      		if(a!=Table2.current_class)
	      		{
	      			if(h_M.type=="private")
	      			Table2.type_check=false;
	      			if(h_M.type=="protected")
	      			{
	      			if(Table2.current_class=="main" || Table2.class_map.get(Table2.current_class).parents.containsKey(a)==false)
	      			Table2.type_check=false;
	      			}
	      		}
	      	
	      	}
	      	if(flag==0)
	      	{
	      		if(a!=Table2.current_class)
	      		{
	      			if(h_M.type=="private")
	      			Table2.type_check=false;
	      			if(h_M.type=="protected")
	      			{
	      			if(Table2.current_class=="main" || Table2.class_map.get(Table2.current_class).parents.containsKey(a)==false)
	      			Table2.type_check=false;
	      			}
	      		}
	      		else
	      		{
	      			if(h_M.type=="private")
	      			Table2.type_check=false;
	      		}
	      		
	      	}
	      	
      		n.f3.accept(this, argu);
      	
      		Table2.called_method=h_M.name;
      	
	      	Table2.para_index=0;
      		n.f4.accept(this, argu);
      		if(Table2.para_index!=h_M.para_count ){Table2.type_check=false;} //// != number of parameters of that method
      	
      		n.f5.accept(this, argu);
      		Table2.called_class=called_class;
      		Table2.called_method=called_method;
      		Table2.expr_type=h_M.return_type;
      		
   	//if(Table2.type_check==true)
   	//{System.out.println("asgdyjafsd");}
      		return _ret;
      	}
      }
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else{
      //hash_class h_C=Table2.class_map.get(Table2.current_class);
      //hash_method h_M=h_C.method_map.get(Table2.current_method);
      
      n.f0.accept(this, argu);
      String a=Table2.prim_expr_type;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String b=Table2.prim_expr_type;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String c=Table2.prim_expr_type;
      
      if(a!="boolean" || b!=c)
      {
      	Table2.type_check=false;
      }
      Table2.expr_type=b;
      return _ret;
      
      }
      
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
   	else
   	{//System.out.println(Table2.called_class);
   	//System.out.println(Table2.called_method);
   	
   	hash_class h_C=Table2.class_map.get(Table2.called_class);
      	hash_method h_M=h_C.method_map.get(Table2.called_method);
      	
   	
   	n.f0.accept(this, argu);
   	if(Table2.para_index>=h_M.para_count )
   	{
   		Table2.type_check=false;
   	}
   	else if(h_M.para_list[Table2.para_index].type!=Table2.expr_type)
   	{
   		//if(b!=Table2.expr_type)
      		//{
      		if(Table2.class_map.containsKey(Table2.expr_type)==false)
      		Table2.type_check=false;
      	
      		
      		else
      		{
      			hash_class hh_C=Table2.class_map.get(Table2.expr_type);
      			if(hh_C.parents.containsKey(h_M.para_list[Table2.para_index].type)==false)
      			Table2.type_check=false;
      		}
   	}
   	
   	Table2.para_index++;
      	n.f1.accept(this, argu);
      	return _ret;
   	}
   }
   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
   	else
   	{
   	hash_class h_C=Table2.class_map.get(Table2.called_class);
      	hash_method h_M=h_C.method_map.get(Table2.called_method);
      
   	n.f0.accept(this, argu);
   	n.f1.accept(this, argu);
   	if(Table2.para_index>=h_M.para_count || h_M.para_list[Table2.para_index].type!=Table2.expr_type)
   	{
   		Table2.type_check=false;
   	}
   	Table2.para_index++;
      	
      	return _ret;
   	}
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      if(Table2.type_check==false)
      {
      return _ret;
      }
     // boolean ident_type=Table2.ident_type;
      Table2.ident_type=true;
      n.f0.accept(this, argu);
      Table2.ident_type=false;
      if(Table2.in_expr==true){Table2.expr_type=Table2.prim_expr_type;}
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      n.f0.accept(this, argu);
      //Table2.prim_expr_type="int";
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      n.f0.accept(this, argu);
      Table2.prim_expr_type="int";
      return _ret;
      
      }
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      n.f0.accept(this, argu);
      //Table2.prim_expr_type="int";
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      n.f0.accept(this, argu);
      Table2.prim_expr_type="boolean";
      return _ret;
      
      }   
}

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      n.f0.accept(this, argu);
      //Table2.prim_expr_type="int";
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      n.f0.accept(this, argu);
      Table2.prim_expr_type="boolean";
      return _ret;
      
      }
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      if(!Table.complete){
      return n.f0.accept(this, argu);
      }
      else if(Table2.type_check==false)
      {
      return (R) null;
      }
      else
      {
      	R _ret=null;
      	String a= (String) n.f0.accept(this, argu);
      	if(Table2.ident_type==true)
      	{
      		if(Table2.current_class=="main")
      		{
      			Table2.type_check=false;
      			return (R) a;
      		}
      		
      		hash_class h_C=Table2.class_map.get(Table2.current_class);
      		hash_method h_M=h_C.method_map.get(Table2.current_method);
      		
      		if(h_M.var_map.containsKey(a)==false)
      		{
      			Table2.type_check=false;
      		}
      		else
      		{
      		String b=h_M.var_map.get(a);
      		Table2.prim_expr_type=b;
      		
      		}
      	}
      	return (R) a;
      	
      	
      }
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      n.f0.accept(this, argu);
      //Table2.prim_expr_type="int";
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      n.f0.accept(this, argu);
      Table2.prim_expr_type=Table2.current_class;
      
      return _ret;
      
      }
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      n.f3.accept(this, argu);
      
      if(Table2.expr_type!="int")Table2.type_check=false;
      
      n.f4.accept(this, argu);
      Table2.prim_expr_type="int[]";
      
      return _ret;
      
      }
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      n.f0.accept(this, argu);
      Table2.ident_type=false;
      String a=(String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(Table2.class_map.containsKey(a)==false)
      {
      Table2.type_check=false;
      }
      else
      {
      Table2.prim_expr_type=a;
      }
      return _ret;
      
      }
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      	n.f0.accept(this, argu);
        n.f1.accept(this, argu);
      	if(Table2.expr_type!="boolean")Table2.type_check=false;
      	Table2.prim_expr_type="boolean";
      	return _ret;
      	
      }
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      combined Table_main= (combined) argu;
      Symbol_Table Table= (Symbol_Table) Table_main.Table1;
      hash_table Table2=Table_main.Table2;
      
      if(!Table.complete){
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
      else if(Table2.type_check==false)
      {
      return _ret;
      }
      else
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Table2.prim_expr_type=Table2.expr_type;
      return _ret;
      
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
